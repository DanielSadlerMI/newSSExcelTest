{"version":3,"file":"taskpane.js","mappings":"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","sources":["webpack://office-addin-taskpane-js/./src/taskpane/taskpane.html","webpack://office-addin-taskpane-js/./node_modules/html-loader/dist/runtime/getUrl.js","webpack://office-addin-taskpane-js/webpack/bootstrap","webpack://office-addin-taskpane-js/webpack/runtime/compat get default export","webpack://office-addin-taskpane-js/webpack/runtime/define property getters","webpack://office-addin-taskpane-js/webpack/runtime/global","webpack://office-addin-taskpane-js/webpack/runtime/hasOwnProperty shorthand","webpack://office-addin-taskpane-js/webpack/runtime/publicPath","webpack://office-addin-taskpane-js/webpack/runtime/jsonp chunk loading","webpack://office-addin-taskpane-js/./node_modules/jwt-decode/build/esm/index.js","webpack://office-addin-taskpane-js/./src/taskpane/taskpane.js"],"sourcesContent":["// Imports\nimport ___HTML_LOADER_GET_SOURCE_FROM_IMPORT___ from \"../../node_modules/html-loader/dist/runtime/getUrl.js\";\nvar ___HTML_LOADER_IMPORT_0___ = new URL(\"./taskpane.css\", import.meta.url);\nvar ___HTML_LOADER_IMPORT_1___ = new URL(\"../../assets/space-station.png\", import.meta.url);\n// Module\nvar ___HTML_LOADER_REPLACEMENT_0___ = ___HTML_LOADER_GET_SOURCE_FROM_IMPORT___(___HTML_LOADER_IMPORT_0___);\nvar ___HTML_LOADER_REPLACEMENT_1___ = ___HTML_LOADER_GET_SOURCE_FROM_IMPORT___(___HTML_LOADER_IMPORT_1___);\nvar code = \" <!DOCTYPE html> <html> <head> <meta charset=\\\"UTF-8\\\"/> <meta http-equiv=\\\"X-UA-Compatible\\\" content=\\\"IE=Edge\\\"/> <meta name=\\\"viewport\\\" content=\\\"width=device-width,initial-scale=1\\\"> <title>Contoso Task Pane Add-in</title> <\" + \"script src=\\\"https://appsforoffice.microsoft.com/lib/1.1/hosted/office.js\\\"><\" + \"/script> <link rel=\\\"stylesheet\\\" href=\\\"https://static2.sharepointonline.com/files/fabric/office-ui-fabric-core/11.0.0/css/fabric.min.css\\\"/> <link href=\\\"\" + ___HTML_LOADER_REPLACEMENT_0___ + \"\\\" rel=\\\"stylesheet\\\"/> </head> <body class=\\\"ms-font-m ms-welcome ms-Fabric\\\"> <header class=\\\"ms-welcome__header ms-bgColor-neutralLighter\\\"> <img width=\\\"80\\\" height=\\\"80\\\" style=\\\"border-style:solid;border-color:#049641\\\" src=\\\"\" + ___HTML_LOADER_REPLACEMENT_1___ + \"\\\" alt=\\\"Contoso\\\" title=\\\"Contoso\\\"/> <h1 class=\\\"ms-font-su welcome-font\\\">Budgets vs Actuals</h1> </header> <section id=\\\"sideload-msg\\\" class=\\\"ms-welcome__main\\\"> <h2 class=\\\"ms-font-xl\\\">Please <a target=\\\"_blank\\\" href=\\\"https://learn.microsoft.com/office/dev/add-ins/testing/test-debug-office-add-ins#sideload-an-office-add-in-for-testing\\\">sideload</a> your add-in to see app body.</h2> </section> <main id=\\\"app-body\\\" class=\\\"ms-welcome__main\\\" style=\\\"display:none\\\"> <input type=\\\"text\\\" id=\\\"fname\\\" name=\\\"fname\\\" placeholder=\\\"Enter resource URL here\\\"> <div role=\\\"button\\\" id=\\\"login\\\" class=\\\"ms-welcome__action ms-Button ms-Button--hero ms-font-m\\\"> <span class=\\\"ms-Button-label\\\">Log In</span> </div> <div id=\\\"username\\\"></div> <p class=\\\"ms-font-m instruction\\\">Choose a budget to view:</p> <select id=\\\"budgetList\\\"> <option value=\\\"nil\\\">Select user</option> </select> <p class=\\\"ms-font-m instruction\\\">Select budget, and load its data</p> <div role=\\\"button\\\" id=\\\"load\\\" class=\\\"ms-welcome__action ms-Button ms-Button--hero ms-font-xl\\\"> <span class=\\\"ms-Button-label\\\">Load Data</span> </div> <p id=\\\"load-status\\\" class=\\\"status\\\"> </p> <div id=\\\"load-progress\\\" class=\\\"progress-bar\\\"> <div id=\\\"load-bar\\\" class=\\\"= progress-bar-fill\\\"></div> </div> <div role=\\\"button\\\" id=\\\"clear\\\" class=\\\"ms-welcome__action ms-Button ms-Button--hero ms-font-m\\\"> <span class=\\\"ms-Button-label\\\">Clear Data</span> </div> <p id=\\\"clear-status\\\" class=\\\"status\\\"> </p> </main> </body> </html> \";\n// Exports\nexport default code;","\"use strict\";\n\nmodule.exports = function (url, options) {\n  if (!options) {\n    // eslint-disable-next-line no-param-reassign\n    options = {};\n  }\n\n  if (!url) {\n    return url;\n  } // eslint-disable-next-line no-underscore-dangle, no-param-reassign\n\n\n  url = String(url.__esModule ? url.default : url);\n\n  if (options.hash) {\n    // eslint-disable-next-line no-param-reassign\n    url += options.hash;\n  }\n\n  if (options.maybeNeedQuotes && /[\\t\\n\\f\\r \"'=<>`]/.test(url)) {\n    return \"\\\"\".concat(url, \"\\\"\");\n  }\n\n  return url;\n};","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = function(module) {\n\tvar getter = module && module.__esModule ?\n\t\tfunction() { return module['default']; } :\n\t\tfunction() { return module; };\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","var scriptUrl;\nif (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + \"\";\nvar document = __webpack_require__.g.document;\nif (!scriptUrl && document) {\n\tif (document.currentScript)\n\t\tscriptUrl = document.currentScript.src;\n\tif (!scriptUrl) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tif(scripts.length) {\n\t\t\tvar i = scripts.length - 1;\n\t\t\twhile (i > -1 && !scriptUrl) scriptUrl = scripts[i--].src;\n\t\t}\n\t}\n}\n// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\n// or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.\nif (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\nscriptUrl = scriptUrl.replace(/#.*$/, \"\").replace(/\\?.*$/, \"\").replace(/\\/[^\\/]+$/, \"/\");\n__webpack_require__.p = scriptUrl;","__webpack_require__.b = document.baseURI || self.location.href;\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t41: 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n// no on chunks loaded\n\n// no jsonp function","export class InvalidTokenError extends Error {\n}\nInvalidTokenError.prototype.name = \"InvalidTokenError\";\nfunction b64DecodeUnicode(str) {\n    return decodeURIComponent(atob(str).replace(/(.)/g, (m, p) => {\n        let code = p.charCodeAt(0).toString(16).toUpperCase();\n        if (code.length < 2) {\n            code = \"0\" + code;\n        }\n        return \"%\" + code;\n    }));\n}\nfunction base64UrlDecode(str) {\n    let output = str.replace(/-/g, \"+\").replace(/_/g, \"/\");\n    switch (output.length % 4) {\n        case 0:\n            break;\n        case 2:\n            output += \"==\";\n            break;\n        case 3:\n            output += \"=\";\n            break;\n        default:\n            throw new Error(\"base64 string is not of the correct length\");\n    }\n    try {\n        return b64DecodeUnicode(output);\n    }\n    catch (err) {\n        return atob(output);\n    }\n}\nexport function jwtDecode(token, options) {\n    if (typeof token !== \"string\") {\n        throw new InvalidTokenError(\"Invalid token specified: must be a string\");\n    }\n    options || (options = {});\n    const pos = options.header === true ? 0 : 1;\n    const part = token.split(\".\")[pos];\n    if (typeof part !== \"string\") {\n        throw new InvalidTokenError(`Invalid token specified: missing part #${pos + 1}`);\n    }\n    let decoded;\n    try {\n        decoded = base64UrlDecode(part);\n    }\n    catch (e) {\n        throw new InvalidTokenError(`Invalid token specified: invalid base64 for part #${pos + 1} (${e.message})`);\n    }\n    try {\n        return JSON.parse(decoded);\n    }\n    catch (e) {\n        throw new InvalidTokenError(`Invalid token specified: invalid json for part #${pos + 1} (${e.message})`);\n    }\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n * See LICENSE in the project root for license information.\n */\n\n/* global console, document, Excel, Office */\nimport { jwtDecode } from \"jwt-decode\";\n\nconst currentDate = new Date();\nconst currentMonth = currentDate.getMonth();\nconst monthPointers = [\"#C1B\", \"#C1A\", \"#C2B\", \"#C2A\", \"#C3B\", \"#C3A\", \"#C4B\", \"#C4A\", \"#C5B\", \"#C5A\", \"#C6B\", \"#C6A\", \"#C7B\", \"#C7A\", \"#C8B\", \"#C8A\", \"#C9B\", \"#C9A\", \"#C10B\", \"#C10A\", \"#C11B\", \"#C11A\", \"#C12B\", \"#C12A\",];\n\nvar apiServer = 'https://10.100.2.11:8000/'\napiServer = 'http://10.100.2.11:8000/'\n\n\nOffice.onReady((info) => {\n    if (info.host === Office.HostType.Excel) {\n        document.getElementById(\"sideload-msg\").style.display = \"none\";\n        document.getElementById(\"app-body\").style.display = \"flex\";\n        document.getElementById(\"load\").onclick = load;\n        document.getElementById(\"clear\").onclick = clear;\n        document.getElementById(\"login\").onclick = login;\n    }\n});\n\nasync function load() {\n    try {\n        await Excel.run(async (context) => {\n            if (document.getElementById(\"budgetList\").value == \"nil\") {\n                document.getElementById(\"load-status\").textContent = \"Please select a user and log in\";\n                document.getElementById(\"load-bar\").style.width = \"0%\";\n            }\n            else if (document.getElementById(\"fname\").value == \"\") {\n                document.getElementById(\"load-status\").textContent = \"Please enter the URL for the data\";\n                document.getElementById(\"load-bar\").style.width = \"0%\";\n            }\n            else {\n                let userTokenEncoded = await OfficeRuntime.auth.getAccessToken({ allowSignInPrompt: true, allowConsentPrompt: true });\n\n                let currentSheet = context.workbook.worksheets.getActiveWorksheet();\n\n                //let variabal = isSetSupported('IdentityAPI', '1.3');\n                //let userToken = jwt_decode(userTokenEncoded);\n                //let userName = userToken.name;\n\n                let codeColumn = [];\n                let markerColumn = [];\n\n                let updateGrid = [];\n\n                await context.sync();\n\n                document.getElementById(\"load-status\").textContent = \"loading...\";\n                document.getElementById(\"load-bar\").style.width = \"0%\";\n                let width = 3.5;\n                const w = 3.5;\n\n                let limCol = 0;\n                let limRow = 0;\n\n                let fullRange = currentSheet.getRange();\n                let found = false;\n                let done = false;\n                let failed = false;\n                let index = 0;\n                let marker = \"\";\n\n                let columnIndices = [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]; //24\n\n                //read from dropdown\n                let budgetCode = document.getElementById(\"budgetList\").value;\n                let budgetName = document.getElementById(\"budgetList\").options[document.getElementById(\"budgetList\").selectedIndex].text;\n\n                //read URL\n                let getURL = document.getElementById(\"fname\").value;\n\n                // retrieve indices of all budget / actual columns\n                for (let i = 0; i < 24; i++) {\n                    index = 0;\n                    found = false;\n                    done = false;\n                    marker = monthPointers[i];\n\n                    while (!found && !done && !failed) {\n                        let columnRange = fullRange.getColumn(index);\n                        let tempRange = columnRange.findOrNullObject(marker, {\n                            completeMatch: true,\n                            matchCase: true,\n                            searchDirection: Excel.SearchDirection.forward\n                        });\n                        await context.sync();\n                        if (!tempRange.isNullObject) {\n                            found = true;\n                            columnIndices[i] = index;\n                            if (index + 1 > limCol) { //maximum column index, to increase speed later\n                                limCol = index + 1;\n                            }\n                        }\n                        index++;\n                        if (index >= 500) {\n                            done = true;\n                            failed = true;\n                        }\n                    }\n\n                    document.getElementById(\"load-bar\").style.width = width + \"%\";\n                    await context.sync();\n                    width = width + w;\n                }\n\n                //check if any column is missing\n                if (!failed) {\n                    index = 0;\n                    found = false;\n                    done = false;\n\n                    //maximum row index, to increase speed later\n                    while (!found && !done) {\n                        let rowRange = fullRange.getRow(index);\n                        let tempRange = rowRange.findOrNullObject(\"#RX\", {\n                            completeMatch: true,\n                            matchCase: true,\n                            searchDirection: Excel.SearchDirection.forward\n                        });\n                        await context.sync();\n                        if (!tempRange.isNullObject) {\n                            found = true;\n                            limRow = index + 1;\n                        }\n                        index++;\n                        if (index >= 500) {\n                            done = true;\n                            limRow = index + 1;\n                        }\n                    }\n\n                    updateGrid = Array(limRow).fill().map(() => Array(limCol).fill(false));\n\n                    //find column with RPG codes\n                    index = 0;\n                    done = false;\n                    while (!done && index < limCol) {\n                        let columnRange = fullRange.getColumn(index);\n                        let tempRange = columnRange.findOrNullObject(\"#N\", {\n                            completeMatch: true,\n                            matchCase: true,\n                            searchDirection: Excel.SearchDirection.forward\n                        });\n                        await context.sync();\n                        if (!tempRange.isNullObject) {\n                            let dataRange = fullRange.getCell(0, index).getResizedRange(limRow, 0);\n                            dataRange.load(\"text\");\n                            await context.sync();\n                            codeColumn = dataRange.text;\n                            done = true;\n                        }\n                        index++;\n                    }\n\n                    document.getElementById(\"load-bar\").style.width = width + \"%\";\n                    await context.sync();\n                    width = width + w;\n\n                    //find column containing row-to-delete tags\n                    index = 0;\n                    done = false;\n                    while (!done && index < limCol) {\n                        let columnRange = fullRange.getColumn(index);\n                        let tempRange = columnRange.findOrNullObject(\"#RC\", {\n                            completeMatch: true,\n                            matchCase: true,\n                            searchDirection: Excel.SearchDirection.forward\n                        });\n                        await context.sync();\n                        if (!tempRange.isNullObject) {\n                            let dataRange = fullRange.getCell(0, index).getResizedRange(limRow, 0);\n                            dataRange.load(\"text\");\n                            await context.sync();\n                            markerColumn = dataRange.text;\n                            done = true;\n                        }\n                        index++;\n                    }\n\n                    //retrieve data\n\n                    let jsonString = \"\";\n                    let errorCheck = false;\n\n                    //// API\n\n                    await fetch(getURL, {\n                        method: 'POST',\n                        headers: {\n                            'Content-Type': 'application/json'\n                        },\n                        body: '{ \\\"param\\\": \\\"' + budgetCode + '\\\", \\\"mode\\\": \\\"BVA\\\" }',\n                    })\n                        .then(response => response.json())\n                        .then(response => JSON.stringify(response))\n                        .then(response => { jsonString = response })\n                        .catch((error) => { errorCheck = true });\n\n                    ////\n\n                    //// DUMMY\n\n                    // if (budget == \"SPA\") {\n                    //     jsonString = \"[{\\\"RPG\\\":\\\"1.01\\\",\\\"Date\\\":\\\"31/03/2024\\\",\\\"BudgetValue\\\":12.3,\\\"ActualValue\\\":45.6},{\\\"RPG\\\":\\\"1.02\\\",\\\"Date\\\":\\\"31/03/2024\\\",\\\"BudgetValue\\\":10.3},\" +\n                    //         \"{\\\"RPG\\\":\\\"1.03\\\",\\\"Date\\\":\\\"31/03/2024\\\",\\\"ActualValue\\\":5.6},{\\\"RPG\\\":\\\"1.04\\\",\\\"Date\\\":\\\"31/03/2024\\\",\\\"BudgetValue\\\":99.3,\\\"ActualValue\\\":30.6}]\";\n                    // }\n                    // else if (budget == \"TA\") {\n                    //     jsonString = \"[{\\\"RPG\\\":\\\"1.01\\\",\\\"Date\\\":\\\"31/03/2024\\\",\\\"BudgetValue\\\":80,\\\"ActualValue\\\":80},{\\\"RPG\\\":\\\"1.02\\\",\\\"Date\\\":\\\"31/03/2024\\\",\\\"BudgetValue\\\":50,\\\"ActualValue\\\":50}]\";\n                    // }\n                    // else if (budget == \"UXB\") {\n                    //     jsonString = \"[{\\\"RPG\\\":\\\"1.01\\\",\\\"Date\\\":\\\"31/03/2024\\\",\\\"BudgetValue\\\":12,\\\"ActualValue\\\":11},{\\\"RPG\\\":\\\"1.02\\\",\\\"Date\\\":\\\"31/03/2024\\\",\\\"BudgetValue\\\":22,\\\"ActualValue\\\":23},\" +\n                    //         \"{\\\"RPG\\\":\\\"2.01\\\",\\\"Date\\\":\\\"31/03/2024\\\",\\\"BudgetValue\\\":34,\\\"ActualValue\\\":33},{\\\"RPG\\\":\\\"2.02\\\",\\\"Date\\\":\\\"31/03/2024\\\",\\\"BudgetValue\\\":44,\\\"ActualValue\\\":45}]\";\n                    // }\n                    // else {\n                    //     jsonString = \"[]\";\n                    // }\n\n                    ////\n\n                    if (!errorCheck) {\n                        document.getElementById(\"load-bar\").style.width = width + \"%\";\n                        await context.sync();\n                        width = width + w;\n\n                        //convert to an object\n                        let dataObject = JSON.parse(jsonString);\n\n                        //check if any data was retrieved\n                        if (jsonString != \"[]\") {\n                            document.getElementById(\"load-bar\").style.width = width + \"%\";\n                            await context.sync();\n                            width = width + w;\n\n                            //write data to table\n\n                            let point = null;\n                            let code = \"\";\n                            let date = \"\";\n                            let splitDate = [];\n                            let monthIndex = -1;\n                            let datum = 0;\n\n                            let error = false;\n                            let errorCode = \"\";\n\n                            let j = 0;\n\n                            for (let i = 0; i < dataObject.length; i++) {\n                                point = dataObject[i];\n                                code = point[\"rpg\"];\n                                date = point[\"Date\"];\n                                splitDate = date.split(\"/\");\n                                if (splitDate.length == 3) {\n                                    if (!splitDate[1].isNaN) {\n                                        monthIndex = columnIndices[(parseInt(splitDate[1]) - 1) * 2];\n                                        done = false;\n                                        if (codeColumn[j][0] != code) { //adjacent rows write faster\n                                            j = 0;\n                                        }\n                                        while (!done && j < limRow) {\n                                            if (codeColumn[j][0] == code) {\n                                                datum = 0;\n                                                if (point.hasOwnProperty(\"BudgetValue\")) {\n                                                    datum = point[\"BudgetValue\"];\n                                                }\n                                                let dataRange = fullRange.getCell(j, monthIndex);\n                                                //dataRange.clear(Excel.ClearApplyTo.contents);\n                                                dataRange.values = [[datum]];\n\n                                                updateGrid[j][monthIndex] = true;\n\n                                                datum = 0;\n                                                if (point.hasOwnProperty(\"ActualValue\")) {\n                                                    datum = point[\"ActualValue\"];\n                                                }\n                                                monthIndex = columnIndices[((parseInt(splitDate[1]) - 1) * 2) + 1];\n                                                dataRange = fullRange.getCell(j, monthIndex);\n                                                //dataRange.clear(Excel.ClearApplyTo.contents);\n                                                dataRange.values = [[datum]];\n\n                                                updateGrid[j][monthIndex] = true;\n\n                                                done = true;\n                                            }\n                                            //j++;\n                                            else {\n                                                j++;\n                                            }\n                                        }\n                                        if (!done) {\n                                            error = true;\n                                            if (errorCode == \"\") {\n                                                errorCode = code;\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n\n                            //delete contents of tagged rows\n                            for (let i = 0; i < limRow; i++) {\n                                if (markerColumn[i][0] == \"#R\" || markerColumn[i][0] == \"#RX\") {\n                                    for (let j = 0; j < 24; j++) {\n                                        if (columnIndices[j] != -1) {\n                                            if (!updateGrid[i][columnIndices[j]]) {\n                                                let dataRange = fullRange.getCell(i, columnIndices[j]);\n                                                dataRange.load(\"valueTypes\");\n                                                await context.sync();\n                                                if (dataRange.valueTypes[0][0] != Excel.RangeValueType.empty) {\n                                                    //dataRange.clear(Excel.ClearApplyTo.contents);\n                                                    dataRange.values = [[\"\"]];\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n\n                            //write budget name in box\n                            index = 0;\n                            done = false;\n                            while (!done && index < limCol) {\n                                let columnRange = fullRange.getColumn(index);\n                                let tempRange = columnRange.findOrNullObject(\"#BC\", {\n                                    completeMatch: true,\n                                    matchCase: true,\n                                    searchDirection: Excel.SearchDirection.forward\n                                });\n                                await context.sync();\n                                if (!tempRange.isNullObject) {\n                                    let column = index;\n                                    index = 0;\n                                    while (!done && index < 500) {\n                                        let rowRange = fullRange.getRow(index);\n                                        let tempRange = rowRange.findOrNullObject(\"#BR\", {\n                                            completeMatch: true,\n                                            matchCase: true,\n                                            searchDirection: Excel.SearchDirection.forward\n                                        });\n                                        await context.sync();\n                                        if (!tempRange.isNullObject) {\n                                            done = true;\n                                            dataRange = fullRange.getCell(index, column);\n                                            dataRange.clear(Excel.ClearApplyTo.contents);\n                                            await context.sync();\n                                            dataRange.values = [[budgetName]];\n                                            await context.sync();\n                                        }\n                                        index++;\n                                    }\n                                }\n                                index++;\n                            }\n\n                            if (error) {\n                                document.getElementById(\"load-status\").textContent = \"Warning. RPG code \" + errorCode + \" missing\";\n                                document.getElementById(\"load-bar\").style.width = \"100%\";\n                            }\n                            else {\n                                document.getElementById(\"load-status\").textContent = \"Loaded successfully.\";\n                                document.getElementById(\"load-bar\").style.width = \"100%\";\n                            }\n                        }\n                        else {\n                            document.getElementById(\"load-status\").textContent = \"Load failed. No data in resource.\";\n                            document.getElementById(\"load-bar\").style.width = \"0%\";\n                        }\n                    }\n                    else {\n                        document.getElementById(\"load-status\").textContent = \"Load failed. Resource at URL is unreachable.\"\n                        document.getElementById(\"load-bar\").style.width = \"0%\";\n                    }\n                }\n                else {\n                    document.getElementById(\"load-status\").textContent = \"Load failed. Missing column markers.\"\n                    document.getElementById(\"load-bar\").style.width = \"0%\";\n                }\n            }\n        });\n    } catch (error) {\n        console.error(error);\n    }\n}\n\nasync function clear() {\n    try {\n        await Excel.run(async (context) => {\n            let currentSheet = context.workbook.worksheets.getActiveWorksheet();\n\n            let markerColumn = [];\n\n            await context.sync();\n\n            document.getElementById(\"load-status\").textContent = \"\";\n            document.getElementById(\"load-bar\").style.width = \"0%\";\n            document.getElementById(\"clear-status\").textContent = \"clearing...\";\n\n            let fullRange = currentSheet.getRange();\n            let found = false;\n            let done = false;\n            let index = 0;\n            let marker = \"\";\n\n            let limCol = 0;\n            let limRow = 0;\n\n            let columnIndices = [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]; //24\n\n            // retrieve indices of all budget / actual columns\n            for (let i = 0; i < 24; i++) {\n                index = 0;\n                found = false;\n                done = false;\n                marker = monthPointers[i];\n\n                while (!found && !done) {\n                    let columnRange = fullRange.getColumn(index);\n                    let tempRange = columnRange.findOrNullObject(marker, {\n                        completeMatch: true,\n                        matchCase: true,\n                        searchDirection: Excel.SearchDirection.forward\n                    });\n                    await context.sync();\n                    if (!tempRange.isNullObject) {\n                        found = true;\n                        columnIndices[i] = index;\n                        if (index + 1 > limCol) { //maximum column index, to increase speed later\n                            limCol = index + 1;\n                        }\n                    }\n                    index++;\n                    if (index >= 500) {\n                        done = true;\n                    }\n                }\n            }\n\n            index = 0;\n            found = false;\n            done = false;\n\n            //maximum row index\n            while (!found && !done) {\n                let rowRange = fullRange.getRow(index);\n                let tempRange = rowRange.findOrNullObject(\"#RX\", {\n                    completeMatch: true,\n                    matchCase: true,\n                    searchDirection: Excel.SearchDirection.forward\n                });\n                await context.sync();\n                if (!tempRange.isNullObject) {\n                    found = true;\n                    limRow = index + 1;\n                }\n                index++;\n                if (index >= 500) {\n                    done = true;\n                    limRow = index + 1;\n                }\n            }\n\n            //find column containing row-to-delete tags\n            index = 0;\n            done = false;\n            while (!done && index < limCol) {\n                let columnRange = fullRange.getColumn(index);\n                let tempRange = columnRange.findOrNullObject(\"#RC\", {\n                    completeMatch: true,\n                    matchCase: true,\n                    searchDirection: Excel.SearchDirection.forward\n                });\n                await context.sync();\n                if (!tempRange.isNullObject) {\n                    let dataRange = fullRange.getCell(0, index).getResizedRange(limRow, 0);\n                    dataRange.load(\"text\");\n                    await context.sync();\n                    markerColumn = dataRange.text;\n                    done = true;\n                }\n                index++;\n            }\n\n\n            //delete contents of tagged rows\n            for (let i = 0; i < limRow; i++) {\n                if (markerColumn[i][0] == \"#R\" || markerColumn[i][0] == \"#RX\") {\n                    for (let j = 0; j < 24; j++) {\n                        if (columnIndices[j] != -1) {\n                            let dataRange = fullRange.getCell(i, columnIndices[j]);\n                            //dataRange.load(\"valueTypes\");\n                            //await context.sync();\n                            //if (dataRange.valueTypes[0][0] != Excel.RangeValueType.empty) {\n                            //    dataRange.clear(Excel.ClearApplyTo.contents);\n                            //}\n\n                            //dataRange.clear(Excel.ClearApplyTo.contents);\n\n                            dataRange.values = [[\"\"]];\n                        }\n                    }\n                }\n            }\n\n            //delete contents of budget name box\n            index = 0;\n            done = false;\n            while (!done && index < limCol) {\n                let columnRange = fullRange.getColumn(index);\n                let tempRange = columnRange.findOrNullObject(\"#BC\", {\n                    completeMatch: true,\n                    matchCase: true,\n                    searchDirection: Excel.SearchDirection.forward\n                });\n                await context.sync();\n                if (!tempRange.isNullObject) {\n                    let column = index;\n                    index = 0;\n                    while (!done && index < limRow) {\n                        let rowRange = fullRange.getRow(index);\n                        let tempRange = rowRange.findOrNullObject(\"#BR\", {\n                            completeMatch: true,\n                            matchCase: true,\n                            searchDirection: Excel.SearchDirection.forward\n                        });\n                        await context.sync();\n                        if (!tempRange.isNullObject) {\n                            done = true;\n                            dataRange = fullRange.getCell(index, column);\n                            dataRange.clear(Excel.ClearApplyTo.contents);\n                            await context.sync();\n                        }\n                        index++;\n                    }\n                }\n                index++;\n            }\n\n            document.getElementById(\"clear-status\").textContent = \" \";\n        });\n    } catch (error) {\n        console.error(error);\n    }\n}\n\nasync function loginSSO() {\n    try {\n        console.log('Login Button Clicked');\n        const accessToken = await Office.auth.getAccessToken({\n            allowSignInPrompt: true,\n            allowConsentPrompt: true,\n            forMSGraphAccess: true,\n\n        });\n        console.log('Access Token:', accessToken);\n        console.log('DATA:', accessToken.login);\n\n    } catch (error) {\n        console.error(error);\n    \n}\n}\nasync function login() {\n    try {\n        console.log('Login Button Clicked');\n        const accessTokenEncoded = await Office.auth.getAccessToken({\n            allowSignInPrompt: true,\n            allowConsentPrompt: true,\n            forMSGraphAccess: true,\n\n\n        });\n        const accessToken = jwtDecode(accessTokenEncoded);\n        console.log('user', accessToken)\n\n    } catch (error) {\n        console.error(error);\n    \n}\n}\n\n// async function login() {\n//     try {\n//         await Excel.run(async (context) => {\n//             if (document.getElementById(\"fname\").value == \"\") {\n//                 //empty budgets dropdown\n//                 let size = document.getElementById(\"budgetList\").options.length - 1;\n//                 for (i = size; i >= 0; i--) {\n//                     document.getElementById(\"budgetList\").remove(i);\n//                 }\n\n//                 //display error message as a sole option in the dropdown\n//                 let option = document.createElement(\"option\");\n//                 option.value = \"nil\";\n//                 option.text = \"Please enter URL\";\n//                 document.getElementById(\"budgetList\").appendChild(option);\n//             }\n//             else {\n//                 //read from dropdown\n//                 let account = document.getElementById(\"userList\").value;\n\n//                 //retrieve data\n\n//                 let jsonString = \"\";\n\n//                 let errorCheck = false;\n\n//                 let getURL = document.getElementById(\"fname\").value;\n\n//                 //// API\n\n//                 await fetch(getURL, {\n//                     method: 'POST',\n//                     headers: {\n//                         'Content-Type': 'application/json'\n//                     },\n//                     body: '{ \\\"param\\\": \\\"' + account + '\\\", \\\"mode\\\": \\\"User\\\" }',\n//                 })\n//                     .then(response => response.json())\n//                     .then(response => JSON.stringify(response))\n//                     .then(response => { jsonString = response })\n//                     .catch((error) => { errorCheck = true });\n\n//                 ////\n\n//                 //// DUMMY\n\n//                 //if (account == \"laila.fernandez@space-station.co.uk\") {\n//                 //    jsonString = \"[{\\\"User\\\":\\\"laila.fernandez@space-station.co.uk\\\",\\\"Code\\\":\\\"SPA\\\",\\\"Name\\\":\\\"Slough\\\"},{\\\"User\\\":\\\"laila.fernandez@space-station.co.uk\\\",\\\"Code\\\":\\\"TA\\\",\\\"Name\\\":\\\"Chiswick\\\"},{\\\"User\\\":\\\"laila.fernandez@space-station.co.uk\\\",\\\"Code\\\":\\\"UXB\\\",\\\"Name\\\":\\\"Uxbridge\\\"}]\";\n//                 //}\n//                 //else {\n//                 //    jsonString = \"[]\";\n//                 //}\n\n//                 ////\n\n//                 //check if any permissions were returned\n//                 if (!errorCheck) {\n//                     if (jsonString != \"[]\") {\n//                         let visibleBudgets = JSON.parse(jsonString);\n\n//                         //empty budgets dropdown\n//                         let size = document.getElementById(\"budgetList\").options.length - 1;\n//                         for (i = size; i >= 0; i--) {\n//                             document.getElementById(\"budgetList\").remove(i);\n//                         }\n\n//                         //fill dropdown with budgets, paired with code as value\n//                         for (let i = 0; i < visibleBudgets.length; i++) {\n//                             let option = document.createElement(\"option\");\n//                             option.value = visibleBudgets[i][\"SiteID\"];\n//                             option.text = visibleBudgets[i][\"SiteName\"];\n//                             document.getElementById(\"budgetList\").appendChild(option);\n//                         }\n//                     }\n//                     else {\n//                         //empty budgets dropdown\n//                         let size = document.getElementById(\"budgetList\").options.length - 1;\n//                         for (i = size; i >= 0; i--) {\n//                             document.getElementById(\"budgetList\").remove(i);\n//                         }\n\n//                         //display error message as a sole option in the dropdown\n//                         let option = document.createElement(\"option\");\n//                         option.value = \"nil\";\n//                         option.text = \"User has no permissions\";\n//                         document.getElementById(\"budgetList\").appendChild(option);\n//                     }\n//                 }\n//                 else {\n//                     //empty budgets dropdown\n//                     let size = document.getElementById(\"budgetList\").options.length - 1;\n//                     for (i = size; i >= 0; i--) {\n//                         document.getElementById(\"budgetList\").remove(i);\n//                     }\n\n//                     //display error message as a sole option in the dropdown\n//                     let option = document.createElement(\"option\");\n//                     option.value = \"nil\";\n//                     option.text = \"URL resource unreachable\";\n//                     document.getElementById(\"budgetList\").appendChild(option);\n//                 }\n//             }\n//         });\n//     } catch (error) {\n//         console.error(error);\n//     }\n// }"],"names":["___HTML_LOADER_IMPORT_0___","___HTML_LOADER_IMPORT_1___","module","exports","url","options","String","__esModule","default","hash","maybeNeedQuotes","test","concat","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","m","n","getter","d","a","definition","key","o","Object","defineProperty","enumerable","get","g","globalThis","this","Function","e","window","obj","prop","prototype","hasOwnProperty","call","scriptUrl","importScripts","location","document","currentScript","src","scripts","getElementsByTagName","length","i","Error","replace","p","b","baseURI","self","href","InvalidTokenError","jwtDecode","token","pos","header","part","split","decoded","str","output","decodeURIComponent","atob","code","charCodeAt","toString","toUpperCase","b64DecodeUnicode","err","base64UrlDecode","message","JSON","parse","_regeneratorRuntime","t","r","value","Symbol","iterator","c","asyncIterator","u","toStringTag","define","configurable","writable","wrap","Generator","create","Context","makeInvokeMethod","tryCatch","type","arg","h","l","f","s","y","GeneratorFunction","GeneratorFunctionPrototype","getPrototypeOf","v","values","defineIteratorMethods","forEach","_invoke","AsyncIterator","invoke","_typeof","resolve","__await","then","callInvokeWithMethodAndArg","done","method","delegate","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","return","TypeError","resultName","next","nextLoc","pushTryEntry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","isNaN","displayName","isGeneratorFunction","constructor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","keys","reverse","pop","prev","charAt","slice","stop","rval","handle","complete","finish","catch","delegateYield","asyncGeneratorStep","gen","reject","_next","_throw","info","error","_asyncToGenerator","fn","args","arguments","apply","Date","getMonth","monthPointers","load","_load","_callee2","_context2","Excel","run","_ref","_callee","context","currentSheet","codeColumn","markerColumn","updateGrid","width","w","limCol","limRow","fullRange","found","failed","index","marker","columnIndices","budgetCode","budgetName","getURL","columnRange","tempRange","rowRange","_tempRange","_columnRange","_tempRange2","_dataRange","_columnRange2","_tempRange3","_dataRange2","jsonString","errorCheck","dataObject","point","date","splitDate","monthIndex","datum","errorCode","j","_i","_i2","_j","_dataRange4","_columnRange3","_tempRange4","column","_rowRange","_tempRange5","_context","getElementById","textContent","style","OfficeRuntime","auth","getAccessToken","allowSignInPrompt","allowConsentPrompt","workbook","worksheets","getActiveWorksheet","sync","getRange","selectedIndex","text","getColumn","findOrNullObject","completeMatch","matchCase","searchDirection","SearchDirection","forward","isNullObject","getRow","Array","fill","map","dataRange","getCell","getResizedRange","fetch","headers","body","response","json","stringify","parseInt","valueTypes","RangeValueType","empty","clear","ClearApplyTo","contents","_x","t0","console","_clear","_callee4","_context4","_ref2","_callee3","_tempRange6","_columnRange4","_tempRange7","_dataRange5","_i3","_columnRange5","_tempRange8","_rowRange2","_tempRange9","_context3","_x2","login","_login","_callee6","accessTokenEncoded","accessToken","_context6","log","Office","forMSGraphAccess","onReady","host","HostType","display","onclick","URL"],"sourceRoot":""}